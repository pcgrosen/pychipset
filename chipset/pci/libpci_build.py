import cffi

builder = cffi.FFI()
builder.cdef("""
/*
 *	The PCI Library
 *
 *	Copyright (c) 1997--2016 Martin Mares <mj@ucw.cz>
 *
 *	Can be freely distributed and used under the terms of the GNU GPL.
 */

/* header.h */

/*
 * Under PCI, each device has 256 bytes of configuration address space,
 * of which the first 64 bytes are standardized as follows:
 */
#define PCI_VENDOR_ID ...
#define PCI_DEVICE_ID ...
#define PCI_COMMAND ...
#define PCI_COMMAND_IO ...
#define PCI_COMMAND_MEMORY ...
#define PCI_COMMAND_MASTER ...
#define PCI_COMMAND_SPECIAL ...
#define PCI_COMMAND_INVALIDATE ...
#define PCI_COMMAND_VGA_PALETTE ...
#define PCI_COMMAND_PARITY ...
#define PCI_COMMAND_WAIT ...
#define PCI_COMMAND_SERR ...
#define PCI_COMMAND_FAST_BACK ...
#define PCI_COMMAND_DISABLE_INTx ...

#define PCI_STATUS ...
#define PCI_STATUS_INTx ...
#define PCI_STATUS_CAP_LIST ...
#define PCI_STATUS_66MHZ ...
#define PCI_STATUS_UDF ...
#define PCI_STATUS_FAST_BACK ...
#define PCI_STATUS_PARITY ...
#define PCI_STATUS_DEVSEL_MASK ...
#define PCI_STATUS_DEVSEL_FAST ...
#define PCI_STATUS_DEVSEL_MEDIUM ...
#define PCI_STATUS_DEVSEL_SLOW ...
#define PCI_STATUS_SIG_TARGET_ABORT ...
#define PCI_STATUS_REC_TARGET_ABORT ...
#define PCI_STATUS_REC_MASTER_ABORT ...
#define PCI_STATUS_SIG_SYSTEM_ERROR ...
#define PCI_STATUS_DETECTED_PARITY ...

#define PCI_CLASS_REVISION ...

#define PCI_REVISION_ID ...
#define PCI_CLASS_PROG ...
#define PCI_CLASS_DEVICE ...

#define PCI_CACHE_LINE_SIZE ...
#define PCI_LATENCY_TIMER ...
#define PCI_HEADER_TYPE ...
#define PCI_HEADER_TYPE_NORMAL ...
#define PCI_HEADER_TYPE_BRIDGE ...
#define PCI_HEADER_TYPE_CARDBUS ...

#define PCI_BIST ...
#define PCI_BIST_CODE_MASK ...
#define PCI_BIST_START ...
#define PCI_BIST_CAPABLE ...

/*
 * Base addresses specify locations in memory or I/O space.
 * Decoded size can be determined by writing a value of
 * 0xffffffff to the register, and reading it back.  Only
 * 1 bits are decoded.
 */
#define PCI_BASE_ADDRESS_0 ...
#define PCI_BASE_ADDRESS_1 ...
#define PCI_BASE_ADDRESS_2 ...
#define PCI_BASE_ADDRESS_3 ...
#define PCI_BASE_ADDRESS_4 ...
#define PCI_BASE_ADDRESS_5 ...
#define PCI_BASE_ADDRESS_SPACE ...
#define PCI_BASE_ADDRESS_SPACE_IO ...
#define PCI_BASE_ADDRESS_SPACE_MEMORY ...
#define PCI_BASE_ADDRESS_MEM_TYPE_MASK ...
#define PCI_BASE_ADDRESS_MEM_TYPE_32 ...
#define PCI_BASE_ADDRESS_MEM_TYPE_1M ...
#define PCI_BASE_ADDRESS_MEM_TYPE_64 ...
#define PCI_BASE_ADDRESS_MEM_PREFETCH ...
#define PCI_BASE_ADDRESS_MEM_MASK ...
#define PCI_BASE_ADDRESS_IO_MASK ...
/* bit 1 is reserved if address_space = 1 */

/* Header type 0 (normal devices) */
#define PCI_CARDBUS_CIS ...
#define PCI_SUBSYSTEM_VENDOR_ID ...
#define PCI_SUBSYSTEM_ID ...
#define PCI_ROM_ADDRESS ...
#define PCI_ROM_ADDRESS_ENABLE ...
#define PCI_ROM_ADDRESS_MASK ...

#define PCI_CAPABILITY_LIST ...

/* 0x35-0x3b are reserved */
#define PCI_INTERRUPT_LINE ...
#define PCI_INTERRUPT_PIN ...
#define PCI_MIN_GNT ...
#define PCI_MAX_LAT ...

/* Header type 1 (PCI-to-PCI bridges) */
#define PCI_PRIMARY_BUS ...
#define PCI_SECONDARY_BUS ...
#define PCI_SUBORDINATE_BUS ...
#define PCI_SEC_LATENCY_TIMER ...
#define PCI_IO_BASE ...
#define PCI_IO_LIMIT ...
#define PCI_IO_RANGE_TYPE_MASK ...
#define PCI_IO_RANGE_TYPE_16 ...
#define PCI_IO_RANGE_TYPE_32 ...
#define PCI_IO_RANGE_MASK ...
#define PCI_SEC_STATUS ...
#define PCI_MEMORY_BASE ...
#define PCI_MEMORY_LIMIT ...
#define PCI_MEMORY_RANGE_TYPE_MASK ...
#define PCI_MEMORY_RANGE_MASK ...
#define PCI_PREF_MEMORY_BASE ...
#define PCI_PREF_MEMORY_LIMIT ...
#define PCI_PREF_RANGE_TYPE_MASK ...
#define PCI_PREF_RANGE_TYPE_32 ...
#define PCI_PREF_RANGE_TYPE_64 ...
#define PCI_PREF_RANGE_MASK ...
#define PCI_PREF_BASE_UPPER32 ...
#define PCI_PREF_LIMIT_UPPER32 ...
#define PCI_IO_BASE_UPPER16 ...
#define PCI_IO_LIMIT_UPPER16 ...
/* 0x34 same as for htype 0 */
/* 0x35-0x3b is reserved */
#define PCI_ROM_ADDRESS1 ...
/* 0x3c-0x3d are same as for htype 0 */
#define PCI_BRIDGE_CONTROL ...
#define PCI_BRIDGE_CTL_PARITY ...
#define PCI_BRIDGE_CTL_SERR ...
#define PCI_BRIDGE_CTL_NO_ISA ...
#define PCI_BRIDGE_CTL_VGA ...
#define PCI_BRIDGE_CTL_MASTER_ABORT ...
#define PCI_BRIDGE_CTL_BUS_RESET ...
#define PCI_BRIDGE_CTL_FAST_BACK ...
#define PCI_BRIDGE_CTL_PRI_DISCARD_TIMER ...
#define PCI_BRIDGE_CTL_SEC_DISCARD_TIMER ...
#define PCI_BRIDGE_CTL_DISCARD_TIMER_STATUS ...
#define PCI_BRIDGE_CTL_DISCARD_TIMER_SERR_EN ...

/* Header type 2 (CardBus bridges) */
#define PCI_CB_CAPABILITY_LIST ...
/* 0x15 reserved */
#define PCI_CB_SEC_STATUS ...
#define PCI_CB_PRIMARY_BUS ...
#define PCI_CB_CARD_BUS ...
#define PCI_CB_SUBORDINATE_BUS ...
#define PCI_CB_LATENCY_TIMER ...
#define PCI_CB_MEMORY_BASE_0 ...
#define PCI_CB_MEMORY_LIMIT_0 ...
#define PCI_CB_MEMORY_BASE_1 ...
#define PCI_CB_MEMORY_LIMIT_1 ...
#define PCI_CB_IO_BASE_0 ...
#define PCI_CB_IO_BASE_0_HI ...
#define PCI_CB_IO_LIMIT_0 ...
#define PCI_CB_IO_LIMIT_0_HI ...
#define PCI_CB_IO_BASE_1 ...
#define PCI_CB_IO_BASE_1_HI ...
#define PCI_CB_IO_LIMIT_1 ...
#define PCI_CB_IO_LIMIT_1_HI ...
#define PCI_CB_IO_RANGE_MASK ...
/* 0x3c-0x3d are same as for htype 0 */
#define PCI_CB_BRIDGE_CONTROL ...
#define PCI_CB_BRIDGE_CTL_PARITY ...
#define PCI_CB_BRIDGE_CTL_SERR ...
#define PCI_CB_BRIDGE_CTL_ISA ...
#define PCI_CB_BRIDGE_CTL_VGA ...
#define PCI_CB_BRIDGE_CTL_MASTER_ABORT ...
#define PCI_CB_BRIDGE_CTL_CB_RESET ...
#define PCI_CB_BRIDGE_CTL_16BIT_INT ...
#define PCI_CB_BRIDGE_CTL_PREFETCH_MEM0 ...
#define PCI_CB_BRIDGE_CTL_PREFETCH_MEM1 ...
#define PCI_CB_BRIDGE_CTL_POST_WRITES ...
#define PCI_CB_SUBSYSTEM_VENDOR_ID ...
#define PCI_CB_SUBSYSTEM_ID ...
#define PCI_CB_LEGACY_MODE_BASE ...
/* 0x48-0x7f reserved */

/* Capability lists */

#define PCI_CAP_LIST_ID ...
#define PCI_CAP_ID_PM ...
#define PCI_CAP_ID_AGP ...
#define PCI_CAP_ID_VPD ...
#define PCI_CAP_ID_SLOTID ...
#define PCI_CAP_ID_MSI ...
#define PCI_CAP_ID_CHSWP ...
#define PCI_CAP_ID_PCIX ...
#define PCI_CAP_ID_HT ...
#define PCI_CAP_ID_VNDR ...
#define PCI_CAP_ID_DBG ...
#define PCI_CAP_ID_CCRC ...
#define PCI_CAP_ID_HOTPLUG ...
#define PCI_CAP_ID_SSVID ...
#define PCI_CAP_ID_AGP3 ...
#define PCI_CAP_ID_SECURE ...
#define PCI_CAP_ID_EXP ...
#define PCI_CAP_ID_MSIX ...
#define PCI_CAP_ID_SATA ...
#define PCI_CAP_ID_AF ...
#define PCI_CAP_ID_EA ...
#define PCI_CAP_LIST_NEXT ...
#define PCI_CAP_FLAGS ...
#define PCI_CAP_SIZEOF ...

/* Capabilities residing in the PCI Express extended configuration space */

#define PCI_EXT_CAP_ID_AER ...
#define PCI_EXT_CAP_ID_VC ...
#define PCI_EXT_CAP_ID_DSN ...
#define PCI_EXT_CAP_ID_PB ...
#define PCI_EXT_CAP_ID_RCLINK ...
#define PCI_EXT_CAP_ID_RCILINK ...
#define PCI_EXT_CAP_ID_RCECOLL ...
#define PCI_EXT_CAP_ID_MFVC ...
#define PCI_EXT_CAP_ID_VC2 ...
#define PCI_EXT_CAP_ID_RBCB ...
#define PCI_EXT_CAP_ID_VNDR ...
#define PCI_EXT_CAP_ID_ACS ...
#define PCI_EXT_CAP_ID_ARI ...
#define PCI_EXT_CAP_ID_ATS ...
#define PCI_EXT_CAP_ID_SRIOV ...
#define PCI_EXT_CAP_ID_PRI ...
#define PCI_EXT_CAP_ID_TPH ...
#define PCI_EXT_CAP_ID_LTR ...
#define PCI_EXT_CAP_ID_PASID ...
#define PCI_EXT_CAP_ID_DPC ...
#define PCI_EXT_CAP_ID_L1PM ...
#define PCI_EXT_CAP_ID_PTM ...

/*** Definitions of capabilities ***/

/* Power Management Registers */

#define PCI_PM_CAP_VER_MASK ...
#define PCI_PM_CAP_PME_CLOCK ...
#define PCI_PM_CAP_DSI ...
#define PCI_PM_CAP_AUX_C_MASK ...
#define PCI_PM_CAP_D1 ...
#define PCI_PM_CAP_D2 ...
#define PCI_PM_CAP_PME_D0 ...
#define PCI_PM_CAP_PME_D1 ...
#define PCI_PM_CAP_PME_D2 ...
#define PCI_PM_CAP_PME_D3_HOT ...
#define PCI_PM_CAP_PME_D3_COLD ...
#define PCI_PM_CTRL ...
#define PCI_PM_CTRL_STATE_MASK ...
#define PCI_PM_CTRL_NO_SOFT_RST ...
#define PCI_PM_CTRL_PME_ENABLE ...
#define PCI_PM_CTRL_DATA_SEL_MASK ...
#define PCI_PM_CTRL_DATA_SCALE_MASK ...
#define PCI_PM_CTRL_PME_STATUS ...
#define PCI_PM_PPB_EXTENSIONS ...
#define PCI_PM_PPB_B2_B3 ...
#define PCI_PM_BPCC_ENABLE ...
#define PCI_PM_DATA_REGISTER ...
#define PCI_PM_SIZEOF ...

/* AGP registers */

#define PCI_AGP_VERSION ...
#define PCI_AGP_RFU ...
#define PCI_AGP_STATUS ...
#define PCI_AGP_STATUS_RQ_MASK ...
#define PCI_AGP_STATUS_ISOCH ...
#define PCI_AGP_STATUS_ARQSZ_MASK ...
#define PCI_AGP_STATUS_CAL_MASK ...
#define PCI_AGP_STATUS_SBA ...
#define PCI_AGP_STATUS_ITA_COH ...
#define PCI_AGP_STATUS_GART64 ...
#define PCI_AGP_STATUS_HTRANS ...
#define PCI_AGP_STATUS_64BIT ...
#define PCI_AGP_STATUS_FW ...
#define PCI_AGP_STATUS_AGP3 ...
#define PCI_AGP_STATUS_RATE4 ...
#define PCI_AGP_STATUS_RATE2 ...
#define PCI_AGP_STATUS_RATE1 ...
#define PCI_AGP_COMMAND ...
#define PCI_AGP_COMMAND_RQ_MASK ...
#define PCI_AGP_COMMAND_ARQSZ_MASK ...
#define PCI_AGP_COMMAND_CAL_MASK ...
#define PCI_AGP_COMMAND_SBA ...
#define PCI_AGP_COMMAND_AGP ...
#define PCI_AGP_COMMAND_GART64 ...
#define PCI_AGP_COMMAND_64BIT ...
#define PCI_AGP_COMMAND_FW ...
#define PCI_AGP_COMMAND_RATE4 ...
#define PCI_AGP_COMMAND_RATE2 ...
#define PCI_AGP_COMMAND_RATE1 ...
#define PCI_AGP_SIZEOF ...

/* Vital Product Data */

#define PCI_VPD_ADDR ...
#define PCI_VPD_ADDR_MASK ...
#define PCI_VPD_ADDR_F ...
#define PCI_VPD_DATA ...

/* Slot Identification */

#define PCI_SID_ESR ...
#define PCI_SID_ESR_NSLOTS ...
#define PCI_SID_ESR_FIC ...
#define PCI_SID_CHASSIS_NR ...

/* Message Signaled Interrupts registers */

#define PCI_MSI_FLAGS ...
#define PCI_MSI_FLAGS_MASK_BIT ...
#define PCI_MSI_FLAGS_64BIT ...
#define PCI_MSI_FLAGS_QSIZE ...
#define PCI_MSI_FLAGS_QMASK ...
#define PCI_MSI_FLAGS_ENABLE ...
#define PCI_MSI_RFU ...
#define PCI_MSI_ADDRESS_LO ...
#define PCI_MSI_ADDRESS_HI ...
#define PCI_MSI_DATA_32 ...
#define PCI_MSI_DATA_64 ...
#define PCI_MSI_MASK_BIT_32 ...
#define PCI_MSI_MASK_BIT_64 ...
#define PCI_MSI_PENDING_32 ...
#define PCI_MSI_PENDING_64 ...

/* PCI-X */
#define PCI_PCIX_COMMAND ...
#define PCI_PCIX_COMMAND_DPERE ...
#define PCI_PCIX_COMMAND_ERO ...
#define PCI_PCIX_COMMAND_MAX_MEM_READ_BYTE_COUNT ...
#define PCI_PCIX_COMMAND_MAX_OUTSTANDING_SPLIT_TRANS ...
#define PCI_PCIX_COMMAND_RESERVED ...
#define PCI_PCIX_STATUS ...
#define PCI_PCIX_STATUS_FUNCTION ...
#define PCI_PCIX_STATUS_DEVICE ...
#define PCI_PCIX_STATUS_BUS ...
#define PCI_PCIX_STATUS_64BIT ...
#define PCI_PCIX_STATUS_133MHZ ...
#define PCI_PCIX_STATUS_SC_DISCARDED ...
#define PCI_PCIX_STATUS_UNEXPECTED_SC ...
#define PCI_PCIX_STATUS_DEVICE_COMPLEXITY ...
#define PCI_PCIX_STATUS_DESIGNED_MAX_MEM_READ_BYTE_COUNT ...
#define PCI_PCIX_STATUS_DESIGNED_MAX_OUTSTANDING_SPLIT_TRANS ...
#define PCI_PCIX_STATUS_DESIGNED_MAX_CUMULATIVE_READ_SIZE ...
#define PCI_PCIX_STATUS_RCVD_SC_ERR_MESS ...
#define PCI_PCIX_STATUS_266MHZ ...
#define PCI_PCIX_STATUS_533MHZ ...
#define PCI_PCIX_SIZEOF ...

/* PCI-X Bridges */
#define PCI_PCIX_BRIDGE_SEC_STATUS ...
#define PCI_PCIX_BRIDGE_SEC_STATUS_64BIT ...
#define PCI_PCIX_BRIDGE_SEC_STATUS_133MHZ ...
#define PCI_PCIX_BRIDGE_SEC_STATUS_SC_DISCARDED ...
#define PCI_PCIX_BRIDGE_SEC_STATUS_UNEXPECTED_SC ...
#define PCI_PCIX_BRIDGE_SEC_STATUS_SC_OVERRUN ...
#define PCI_PCIX_BRIDGE_SEC_STATUS_SPLIT_REQUEST_DELAYED ...
#define PCI_PCIX_BRIDGE_SEC_STATUS_CLOCK_FREQ ...
#define PCI_PCIX_BRIDGE_SEC_STATUS_RESERVED ...
#define PCI_PCIX_BRIDGE_STATUS ...
#define PCI_PCIX_BRIDGE_STATUS_FUNCTION ...
#define PCI_PCIX_BRIDGE_STATUS_DEVICE ...
#define PCI_PCIX_BRIDGE_STATUS_BUS ...
#define PCI_PCIX_BRIDGE_STATUS_64BIT ...
#define PCI_PCIX_BRIDGE_STATUS_133MHZ ...
#define PCI_PCIX_BRIDGE_STATUS_SC_DISCARDED ...
#define PCI_PCIX_BRIDGE_STATUS_UNEXPECTED_SC ...
#define PCI_PCIX_BRIDGE_STATUS_SC_OVERRUN ...
#define PCI_PCIX_BRIDGE_STATUS_SPLIT_REQUEST_DELAYED ...
#define PCI_PCIX_BRIDGE_STATUS_RESERVED ...
#define PCI_PCIX_BRIDGE_UPSTREAM_SPLIT_TRANS_CTRL ...
#define PCI_PCIX_BRIDGE_DOWNSTREAM_SPLIT_TRANS_CTRL ...
#define PCI_PCIX_BRIDGE_STR_CAPACITY ...
#define PCI_PCIX_BRIDGE_STR_COMMITMENT_LIMIT ...
#define PCI_PCIX_BRIDGE_SIZEOF ...

/* HyperTransport (as of spec rev. 2.00) */
#define PCI_HT_CMD ...
#define PCI_HT_CMD_TYP_HI ...
#define PCI_HT_CMD_TYP_HI_PRI ...
#define PCI_HT_CMD_TYP_HI_SEC ...
#define PCI_HT_CMD_TYP ...
#define PCI_HT_CMD_TYP_SW ...
#define PCI_HT_CMD_TYP_IDC ...
#define PCI_HT_CMD_TYP_RID ...
#define PCI_HT_CMD_TYP_UIDC ...
#define PCI_HT_CMD_TYP_ECSA ...
#define PCI_HT_CMD_TYP_AM ...
#define PCI_HT_CMD_TYP_MSIM ...
#define PCI_HT_CMD_TYP_DR ...
#define PCI_HT_CMD_TYP_VCS ...
#define PCI_HT_CMD_TYP_RM ...
#define PCI_HT_CMD_TYP_X86 ...

					/* Link Control Register */
#define PCI_HT_LCTR_CFLE ...
#define PCI_HT_LCTR_CST ...
#define PCI_HT_LCTR_CFE ...
#define PCI_HT_LCTR_LKFAIL ...
#define PCI_HT_LCTR_INIT ...
#define PCI_HT_LCTR_EOC ...
#define PCI_HT_LCTR_TXO ...
#define PCI_HT_LCTR_CRCERR ...
#define PCI_HT_LCTR_ISOCEN ...
#define PCI_HT_LCTR_LSEN ...
#define PCI_HT_LCTR_EXTCTL ...
#define PCI_HT_LCTR_64B ...

					/* Link Configuration Register */
#define PCI_HT_LCNF_MLWI ...
#define PCI_HT_LCNF_LW_8B ...
#define PCI_HT_LCNF_LW_16B ...
#define PCI_HT_LCNF_LW_32B ...
#define PCI_HT_LCNF_LW_2B ...
#define PCI_HT_LCNF_LW_4B ...
#define PCI_HT_LCNF_LW_NC ...
#define PCI_HT_LCNF_DFI ...
#define PCI_HT_LCNF_MLWO ...
#define PCI_HT_LCNF_DFO ...
#define PCI_HT_LCNF_LWI ...
#define PCI_HT_LCNF_DFIE ...
#define PCI_HT_LCNF_LWO ...
#define PCI_HT_LCNF_DFOE ...

					/* Revision ID Register */
#define PCI_HT_RID_MIN ...
#define PCI_HT_RID_MAJ ...

					/* Link Frequency/Error Register */
#define PCI_HT_LFRER_FREQ ...
#define PCI_HT_LFRER_200 ...
#define PCI_HT_LFRER_300 ...
#define PCI_HT_LFRER_400 ...
#define PCI_HT_LFRER_500 ...
#define PCI_HT_LFRER_600 ...
#define PCI_HT_LFRER_800 ...
#define PCI_HT_LFRER_1000 ...
#define PCI_HT_LFRER_1200 ...
#define PCI_HT_LFRER_1400 ...
#define PCI_HT_LFRER_1600 ...
#define PCI_HT_LFRER_VEND ...
#define PCI_HT_LFRER_ERR ...
#define PCI_HT_LFRER_PROT ...
#define PCI_HT_LFRER_OV ...
#define PCI_HT_LFRER_EOC ...
#define PCI_HT_LFRER_CTLT ...

					/* Link Frequency Capability Register */
#define PCI_HT_LFCAP_200 ...
#define PCI_HT_LFCAP_300 ...
#define PCI_HT_LFCAP_400 ...
#define PCI_HT_LFCAP_500 ...
#define PCI_HT_LFCAP_600 ...
#define PCI_HT_LFCAP_800 ...
#define PCI_HT_LFCAP_1000 ...
#define PCI_HT_LFCAP_1200 ...
#define PCI_HT_LFCAP_1400 ...
#define PCI_HT_LFCAP_1600 ...
#define PCI_HT_LFCAP_VEND ...

					/* Feature Register */
#define PCI_HT_FTR_ISOCFC ...
#define PCI_HT_FTR_LDTSTOP ...
#define PCI_HT_FTR_CRCTM ...
#define PCI_HT_FTR_ECTLT ...
#define PCI_HT_FTR_64BA ...
#define PCI_HT_FTR_UIDRD ...

					/* Error Handling Register */
#define PCI_HT_EH_PFLE ...
#define PCI_HT_EH_OFLE ...
#define PCI_HT_EH_PFE ...
#define PCI_HT_EH_OFE ...
#define PCI_HT_EH_EOCFE ...
#define PCI_HT_EH_RFE ...
#define PCI_HT_EH_CRCFE ...
#define PCI_HT_EH_SERRFE ...
#define PCI_HT_EH_CF ...
#define PCI_HT_EH_RE ...
#define PCI_HT_EH_PNFE ...
#define PCI_HT_EH_ONFE ...
#define PCI_HT_EH_EOCNFE ...
#define PCI_HT_EH_RNFE ...
#define PCI_HT_EH_CRCNFE ...
#define PCI_HT_EH_SERRNFE ...

/* HyperTransport: Slave or Primary Interface */
#define PCI_HT_PRI_CMD ...
#define PCI_HT_PRI_CMD_BUID ...
#define PCI_HT_PRI_CMD_UC ...
#define PCI_HT_PRI_CMD_MH ...
#define PCI_HT_PRI_CMD_DD ...
#define PCI_HT_PRI_CMD_DUL ...

#define PCI_HT_PRI_LCTR0 ...
#define PCI_HT_PRI_LCNF0 ...
#define PCI_HT_PRI_LCTR1 ...
#define PCI_HT_PRI_LCNF1 ...
#define PCI_HT_PRI_RID ...
#define PCI_HT_PRI_LFRER0 ...
#define PCI_HT_PRI_LFCAP0 ...
#define PCI_HT_PRI_FTR ...
#define PCI_HT_PRI_LFRER1 ...
#define PCI_HT_PRI_LFCAP1 ...
#define PCI_HT_PRI_ES ...
#define PCI_HT_PRI_EH ...
#define PCI_HT_PRI_MBU ...
#define PCI_HT_PRI_MLU ...
#define PCI_HT_PRI_BN ...
#define PCI_HT_PRI_SIZEOF ...

/* HyperTransport: Host or Secondary Interface */
#define PCI_HT_SEC_CMD ...
#define PCI_HT_SEC_CMD_WR ...
#define PCI_HT_SEC_CMD_DE ...
#define PCI_HT_SEC_CMD_DN ...
#define PCI_HT_SEC_CMD_CS ...
#define PCI_HT_SEC_CMD_HH ...
#define PCI_HT_SEC_CMD_AS ...
#define PCI_HT_SEC_CMD_HIECE ...
#define PCI_HT_SEC_CMD_DUL ...

#define PCI_HT_SEC_LCTR ...
#define PCI_HT_SEC_LCNF ...
#define PCI_HT_SEC_RID ...
#define PCI_HT_SEC_LFRER ...
#define PCI_HT_SEC_LFCAP ...
#define PCI_HT_SEC_FTR ...
#define PCI_HT_SEC_FTR_EXTRS ...
#define PCI_HT_SEC_FTR_UCNFE ...
#define PCI_HT_SEC_ES ...
#define PCI_HT_SEC_EH ...
#define PCI_HT_SEC_MBU ...
#define PCI_HT_SEC_MLU ...
#define PCI_HT_SEC_SIZEOF ...

/* HyperTransport: Switch */
#define PCI_HT_SW_CMD ...
#define PCI_HT_SW_CMD_VIBERR ...
#define PCI_HT_SW_CMD_VIBFL ...
#define PCI_HT_SW_CMD_VIBFT ...
#define PCI_HT_SW_CMD_VIBNFT ...
#define PCI_HT_SW_PMASK ...
#define PCI_HT_SW_SWINF ...
#define PCI_HT_SW_SWINF_DP ...
#define PCI_HT_SW_SWINF_EN ...
#define PCI_HT_SW_SWINF_CR ...
#define PCI_HT_SW_SWINF_PCIDX ...
#define PCI_HT_SW_SWINF_BLRIDX ...
#define PCI_HT_SW_SWINF_SBIDX ...
#define PCI_HT_SW_SWINF_HP ...
#define PCI_HT_SW_SWINF_HIDE ...
#define PCI_HT_SW_PCD ...
#define PCI_HT_SW_BLRD ...
#define PCI_HT_SW_SBD ...
#define PCI_HT_SW_SIZEOF ...

					/* Counter indices */
#define PCI_HT_SW_PC_PCR ...
#define PCI_HT_SW_PC_NPCR ...
#define PCI_HT_SW_PC_RCR ...
#define PCI_HT_SW_PC_PDWR ...
#define PCI_HT_SW_PC_NPDWR ...
#define PCI_HT_SW_PC_RDWR ...
#define PCI_HT_SW_PC_PCT ...
#define PCI_HT_SW_PC_NPCT ...
#define PCI_HT_SW_PC_RCT ...
#define PCI_HT_SW_PC_PDWT ...
#define PCI_HT_SW_PC_NPDWT ...
#define PCI_HT_SW_PC_RDWT ...

					/* Base/Limit Range indices */
#define PCI_HT_SW_BLR_BASE0_LO ...
#define PCI_HT_SW_BLR_BASE0_HI ...
#define PCI_HT_SW_BLR_LIM0_LO ...
#define PCI_HT_SW_BLR_LIM0_HI ...

					/* Secondary Base indices */
#define PCI_HT_SW_SB_LO ...
#define PCI_HT_SW_S0_HI ...

/* HyperTransport: Interrupt Discovery and Configuration */
#define PCI_HT_IDC_IDX ...
#define PCI_HT_IDC_DATA ...
#define PCI_HT_IDC_SIZEOF ...

					/* Register indices */
#define PCI_HT_IDC_IDX_LINT ...
#define PCI_HT_IDC_LINT ...
#define PCI_HT_IDC_IDX_IDR ...
					/* Low part (at index) */
#define PCI_HT_IDC_IDR_MASK ...
#define PCI_HT_IDC_IDR_POL ...
#define PCI_HT_IDC_IDR_II_2 ...
#define PCI_HT_IDC_IDR_II_5 ...
#define PCI_HT_IDC_IDR_II_6 ...
#define PCI_HT_IDC_IDR_II_24 ...
					/* High part (at index + 1) */
#define PCI_HT_IDC_IDR_II_32 ...
#define PCI_HT_IDC_IDR_PASSPW ...
#define PCI_HT_IDC_IDR_WEOI ...

/* HyperTransport: Revision ID */
#define PCI_HT_RID_RID ...
#define PCI_HT_RID_SIZEOF ...

/* HyperTransport: UnitID Clumping */
#define PCI_HT_UIDC_CS ...
#define PCI_HT_UIDC_CE ...
#define PCI_HT_UIDC_SIZEOF ...

/* HyperTransport: Extended Configuration Space Access */
#define PCI_HT_ECSA_ADDR ...
#define PCI_HT_ECSA_ADDR_REG ...
#define PCI_HT_ECSA_ADDR_FUN ...
#define PCI_HT_ECSA_ADDR_DEV ...
#define PCI_HT_ECSA_ADDR_BUS ...
#define PCI_HT_ECSA_ADDR_TYPE ...
#define PCI_HT_ECSA_DATA ...
#define PCI_HT_ECSA_SIZEOF ...

/* HyperTransport: Address Mapping */
#define PCI_HT_AM_CMD ...
#define PCI_HT_AM_CMD_NDMA ...
#define PCI_HT_AM_CMD_IOSIZ ...
#define PCI_HT_AM_CMD_MT ...
#define PCI_HT_AM_CMD_MT_40B ...
#define PCI_HT_AM_CMD_MT_64B ...

					/* Window Control Register bits */
#define PCI_HT_AM_SBW_CTR_COMP ...
#define PCI_HT_AM_SBW_CTR_NCOH ...
#define PCI_HT_AM_SBW_CTR_ISOC ...
#define PCI_HT_AM_SBW_CTR_EN ...

/* HyperTransport: 40-bit Address Mapping */
#define PCI_HT_AM40_SBNPW ...
#define PCI_HT_AM40_SBW_BASE ...
#define PCI_HT_AM40_SBW_CTR ...
#define PCI_HT_AM40_SBPW ...
#define PCI_HT_AM40_DMA_PBASE0 ...
#define PCI_HT_AM40_DMA_CTR0 ...
#define PCI_HT_AM40_DMA_CTR_CTR ...
#define PCI_HT_AM40_DMA_SLIM0 ...
#define PCI_HT_AM40_DMA_SBASE0 ...
#define PCI_HT_AM40_SIZEOF ...

/* HyperTransport: 64-bit Address Mapping */
#define PCI_HT_AM64_IDX ...
#define PCI_HT_AM64_DATA_LO ...
#define PCI_HT_AM64_DATA_HI ...
#define PCI_HT_AM64_SIZEOF ...

					/* Register indices */
#define PCI_HT_AM64_IDX_SBNPW ...
#define PCI_HT_AM64_W_BASE_LO ...
#define PCI_HT_AM64_W_CTR ...
#define PCI_HT_AM64_IDX_SBPW ...
#define PCI_HT_AM64_IDX_PBNPW ...
#define PCI_HT_AM64_IDX_DMAPB0 ...
#define PCI_HT_AM64_IDX_DMASB0 ...
#define PCI_HT_AM64_IDX_DMASL0 ...

/* HyperTransport: MSI Mapping */
#define PCI_HT_MSIM_CMD ...
#define PCI_HT_MSIM_CMD_EN ...
#define PCI_HT_MSIM_CMD_FIXD ...
#define PCI_HT_MSIM_ADDR_LO ...
#define PCI_HT_MSIM_ADDR_HI ...
#define PCI_HT_MSIM_SIZEOF ...

/* HyperTransport: DirectRoute */
#define PCI_HT_DR_CMD ...
#define PCI_HT_DR_CMD_NDRS ...
#define PCI_HT_DR_CMD_IDX ...
#define PCI_HT_DR_EN ...
#define PCI_HT_DR_DATA ...
#define PCI_HT_DR_SIZEOF ...

					/* Register indices */
#define PCI_HT_DR_IDX_BASE_LO ...
#define PCI_HT_DR_OTNRD ...
#define PCI_HT_DR_BL_LO ...
#define PCI_HT_DR_IDX_BASE_HI ...
#define PCI_HT_DR_IDX_LIMIT_LO ...
#define PCI_HT_DR_IDX_LIMIT_HI ...

/* HyperTransport: VCSet */
#define PCI_HT_VCS_SUP ...
#define PCI_HT_VCS_L1EN ...
#define PCI_HT_VCS_L0EN ...
#define PCI_HT_VCS_SBD ...
#define PCI_HT_VCS_SINT ...
#define PCI_HT_VCS_SSUP ...
#define PCI_HT_VCS_SSUP_0 ...
#define PCI_HT_VCS_SSUP_3 ...
#define PCI_HT_VCS_SSUP_15 ...
#define PCI_HT_VCS_NFCBD ...
#define PCI_HT_VCS_NFCINT ...
#define PCI_HT_VCS_SIZEOF ...

/* HyperTransport: Retry Mode */
#define PCI_HT_RM_CTR0 ...
#define PCI_HT_RM_CTR_LRETEN ...
#define PCI_HT_RM_CTR_FSER ...
#define PCI_HT_RM_CTR_ROLNEN ...
#define PCI_HT_RM_CTR_FSS ...
#define PCI_HT_RM_CTR_RETNEN ...
#define PCI_HT_RM_CTR_RETFEN ...
#define PCI_HT_RM_CTR_AA ...
#define PCI_HT_RM_STS0 ...
#define PCI_HT_RM_STS_RETSNT ...
#define PCI_HT_RM_STS_CNTROL ...
#define PCI_HT_RM_STS_SRCV ...
#define PCI_HT_RM_CTR1 ...
#define PCI_HT_RM_STS1 ...
#define PCI_HT_RM_CNT0 ...
#define PCI_HT_RM_CNT1 ...
#define PCI_HT_RM_SIZEOF ...

/* Vendor-Specific Capability (see PCI_EVNDR_xxx for the PCIe version) */
#define PCI_VNDR_LENGTH ...

/* PCI Express */
#define PCI_EXP_FLAGS ...
#define PCI_EXP_FLAGS_VERS ...
#define PCI_EXP_FLAGS_TYPE ...
#define PCI_EXP_TYPE_ENDPOINT ...
#define PCI_EXP_TYPE_LEG_END ...
#define PCI_EXP_TYPE_ROOT_PORT ...
#define PCI_EXP_TYPE_UPSTREAM ...
#define PCI_EXP_TYPE_DOWNSTREAM ...
#define PCI_EXP_TYPE_PCI_BRIDGE ...
#define PCI_EXP_TYPE_PCIE_BRIDGE ...
#define PCI_EXP_TYPE_ROOT_INT_EP ...
#define PCI_EXP_TYPE_ROOT_EC ...
#define PCI_EXP_FLAGS_SLOT ...
#define PCI_EXP_FLAGS_IRQ ...
#define PCI_EXP_DEVCAP ...
#define PCI_EXP_DEVCAP_PAYLOAD ...
#define PCI_EXP_DEVCAP_PHANTOM ...
#define PCI_EXP_DEVCAP_EXT_TAG ...
#define PCI_EXP_DEVCAP_L0S ...
#define PCI_EXP_DEVCAP_L1 ...
#define PCI_EXP_DEVCAP_ATN_BUT ...
#define PCI_EXP_DEVCAP_ATN_IND ...
#define PCI_EXP_DEVCAP_PWR_IND ...
#define PCI_EXP_DEVCAP_RBE ...
#define PCI_EXP_DEVCAP_PWR_VAL ...
#define PCI_EXP_DEVCAP_PWR_SCL ...
#define PCI_EXP_DEVCAP_FLRESET ...
#define PCI_EXP_DEVCTL ...
#define PCI_EXP_DEVCTL_CERE ...
#define PCI_EXP_DEVCTL_NFERE ...
#define PCI_EXP_DEVCTL_FERE ...
#define PCI_EXP_DEVCTL_URRE ...
#define PCI_EXP_DEVCTL_RELAXED ...
#define PCI_EXP_DEVCTL_PAYLOAD ...
#define PCI_EXP_DEVCTL_EXT_TAG ...
#define PCI_EXP_DEVCTL_PHANTOM ...
#define PCI_EXP_DEVCTL_AUX_PME ...
#define PCI_EXP_DEVCTL_NOSNOOP ...
#define PCI_EXP_DEVCTL_READRQ ...
#define PCI_EXP_DEVCTL_BCRE ...
#define PCI_EXP_DEVCTL_FLRESET ...
#define PCI_EXP_DEVSTA ...
#define PCI_EXP_DEVSTA_CED ...
#define PCI_EXP_DEVSTA_NFED ...
#define PCI_EXP_DEVSTA_FED ...
#define PCI_EXP_DEVSTA_URD ...
#define PCI_EXP_DEVSTA_AUXPD ...
#define PCI_EXP_DEVSTA_TRPND ...
#define PCI_EXP_LNKCAP ...
#define PCI_EXP_LNKCAP_SPEED ...
#define PCI_EXP_LNKCAP_WIDTH ...
#define PCI_EXP_LNKCAP_ASPM ...
#define PCI_EXP_LNKCAP_L0S ...
#define PCI_EXP_LNKCAP_L1 ...
#define PCI_EXP_LNKCAP_CLOCKPM ...
#define PCI_EXP_LNKCAP_SURPRISE ...
#define PCI_EXP_LNKCAP_DLLA ...
#define PCI_EXP_LNKCAP_LBNC ...
#define PCI_EXP_LNKCAP_AOC ...
#define PCI_EXP_LNKCAP_PORT ...
#define PCI_EXP_LNKCTL ...
#define PCI_EXP_LNKCTL_ASPM ...
#define PCI_EXP_LNKCTL_RCB ...
#define PCI_EXP_LNKCTL_DISABLE ...
#define PCI_EXP_LNKCTL_RETRAIN ...
#define PCI_EXP_LNKCTL_CLOCK ...
#define PCI_EXP_LNKCTL_XSYNCH ...
#define PCI_EXP_LNKCTL_CLOCKPM ...
#define PCI_EXP_LNKCTL_HWAUTWD ...
#define PCI_EXP_LNKCTL_BWMIE ...
#define PCI_EXP_LNKCTL_AUTBWIE ...
#define PCI_EXP_LNKSTA ...
#define PCI_EXP_LNKSTA_SPEED ...
#define PCI_EXP_LNKSTA_WIDTH ...
#define PCI_EXP_LNKSTA_TR_ERR ...
#define PCI_EXP_LNKSTA_TRAIN ...
#define PCI_EXP_LNKSTA_SL_CLK ...
#define PCI_EXP_LNKSTA_DL_ACT ...
#define PCI_EXP_LNKSTA_BWMGMT ...
#define PCI_EXP_LNKSTA_AUTBW ...
#define PCI_EXP_SLTCAP ...
#define PCI_EXP_SLTCAP_ATNB ...
#define PCI_EXP_SLTCAP_PWRC ...
#define PCI_EXP_SLTCAP_MRL ...
#define PCI_EXP_SLTCAP_ATNI ...
#define PCI_EXP_SLTCAP_PWRI ...
#define PCI_EXP_SLTCAP_HPS ...
#define PCI_EXP_SLTCAP_HPC ...
#define PCI_EXP_SLTCAP_PWR_VAL ...
#define PCI_EXP_SLTCAP_PWR_SCL ...
#define PCI_EXP_SLTCAP_INTERLOCK ...
#define PCI_EXP_SLTCAP_NOCMDCOMP ...
#define PCI_EXP_SLTCAP_PSN ...
#define PCI_EXP_SLTCTL ...
#define PCI_EXP_SLTCTL_ATNB ...
#define PCI_EXP_SLTCTL_PWRF ...
#define PCI_EXP_SLTCTL_MRLS ...
#define PCI_EXP_SLTCTL_PRSD ...
#define PCI_EXP_SLTCTL_CMDC ...
#define PCI_EXP_SLTCTL_HPIE ...
#define PCI_EXP_SLTCTL_ATNI ...
#define PCI_EXP_SLTCTL_PWRI ...
#define PCI_EXP_SLTCTL_PWRC ...
#define PCI_EXP_SLTCTL_INTERLOCK ...
#define PCI_EXP_SLTCTL_LLCHG ...
#define PCI_EXP_SLTSTA ...
#define PCI_EXP_SLTSTA_ATNB ...
#define PCI_EXP_SLTSTA_PWRF ...
#define PCI_EXP_SLTSTA_MRLS ...
#define PCI_EXP_SLTSTA_PRSD ...
#define PCI_EXP_SLTSTA_CMDC ...
#define PCI_EXP_SLTSTA_MRL_ST ...
#define PCI_EXP_SLTSTA_PRES ...
#define PCI_EXP_SLTSTA_INTERLOCK ...
#define PCI_EXP_SLTSTA_LLCHG ...
#define PCI_EXP_RTCTL ...
#define PCI_EXP_RTCTL_SECEE ...
#define PCI_EXP_RTCTL_SENFEE ...
#define PCI_EXP_RTCTL_SEFEE ...
#define PCI_EXP_RTCTL_PMEIE ...
#define PCI_EXP_RTCTL_CRSVIS ...
#define PCI_EXP_RTCAP ...
#define PCI_EXP_RTCAP_CRSVIS ...
#define PCI_EXP_RTSTA ...
#define PCI_EXP_RTSTA_PME_REQID ...
#define PCI_EXP_RTSTA_PME_STATUS ...
#define PCI_EXP_RTSTA_PME_PENDING ...
#define PCI_EXP_DEVCAP2 ...
#define PCI_EXP_DEVCAP2_LTR ...
#define PCI_EXP_DEVCTL2 ...
#define PCI_EXP_DEV2_TIMEOUT_DIS ...
#define PCI_EXP_DEV2_ARI ...
#define PCI_EXP_DEV2_LTR ...
#define PCI_EXP_DEVSTA2 ...
#define PCI_EXP_LNKCAP2 ...
#define PCI_EXP_LNKCTL2 ...
#define PCI_EXP_LNKCTL2_CMPLNC ...
#define PCI_EXP_LNKCTL2_SPEED_DIS ...
#define PCI_EXP_LNKCTL2_MOD_CMPLNC ...
#define PCI_EXP_LNKCTL2_CMPLNC_SOS ...
#define PCI_EXP_LNKSTA2 ...
#define PCI_EXP_LINKSTA2_EQU_COMP ...
#define PCI_EXP_LINKSTA2_EQU_PHASE1 ...
#define PCI_EXP_LINKSTA2_EQU_PHASE2 ...
#define PCI_EXP_LINKSTA2_EQU_PHASE3 ...
#define PCI_EXP_LINKSTA2_EQU_REQ ...
#define PCI_EXP_SLTCAP2 ...
#define PCI_EXP_SLTCTL2 ...
#define PCI_EXP_SLTSTA2 ...

/* MSI-X */
#define PCI_MSIX_ENABLE ...
#define PCI_MSIX_MASK ...
#define PCI_MSIX_TABSIZE ...
#define PCI_MSIX_TABLE ...
#define PCI_MSIX_PBA ...
#define PCI_MSIX_BIR ...

/* Subsystem vendor/device ID for PCI bridges */
#define PCI_SSVID_VENDOR ...
#define PCI_SSVID_DEVICE ...

/* PCI Advanced Features */
#define PCI_AF_CAP ...
#define PCI_AF_CAP_TP ...
#define PCI_AF_CAP_FLR ...
#define PCI_AF_CTRL ...
#define PCI_AF_CTRL_FLR ...
#define PCI_AF_STATUS ...
#define PCI_AF_STATUS_TP ...

/* SATA Host Bus Adapter */
#define PCI_SATA_HBA_BARS ...
#define PCI_SATA_HBA_REG0 ...

/* Enhanced Allocation (EA) */
#define PCI_EA_CAP_TYPE1_SECONDARY ...
#define PCI_EA_CAP_TYPE1_SUBORDINATE ...
/* EA Entry header */
#define PCI_EA_CAP_ENT_WRITABLE ...
#define PCI_EA_CAP_ENT_ENABLE ...

/*** Definitions of extended capabilities ***/

/* Advanced Error Reporting */
#define PCI_ERR_UNCOR_STATUS ...
#define PCI_ERR_UNC_TRAIN ...
#define PCI_ERR_UNC_DLP ...
#define PCI_ERR_UNC_SDES ...
#define PCI_ERR_UNC_POISON_TLP ...
#define PCI_ERR_UNC_FCP ...
#define PCI_ERR_UNC_COMP_TIME ...
#define PCI_ERR_UNC_COMP_ABORT ...
#define PCI_ERR_UNC_UNX_COMP ...
#define PCI_ERR_UNC_RX_OVER ...
#define PCI_ERR_UNC_MALF_TLP ...
#define PCI_ERR_UNC_ECRC ...
#define PCI_ERR_UNC_UNSUP ...
#define PCI_ERR_UNC_ACS_VIOL ...
#define PCI_ERR_UNCOR_MASK ...
	/* Same bits as above */
#define PCI_ERR_UNCOR_SEVER ...
	/* Same bits as above */
#define PCI_ERR_COR_STATUS ...
#define PCI_ERR_COR_RCVR ...
#define PCI_ERR_COR_BAD_TLP ...
#define PCI_ERR_COR_BAD_DLLP ...
#define PCI_ERR_COR_REP_ROLL ...
#define PCI_ERR_COR_REP_TIMER ...
#define PCI_ERR_COR_REP_ANFE ...
#define PCI_ERR_COR_MASK ...
	/* Same bits as above */
#define PCI_ERR_CAP ...
#define PCI_ERR_CAP_ECRC_GENC ...
#define PCI_ERR_CAP_ECRC_GENE ...
#define PCI_ERR_CAP_ECRC_CHKC ...
#define PCI_ERR_CAP_ECRC_CHKE ...
#define PCI_ERR_HEADER_LOG ...
#define PCI_ERR_ROOT_COMMAND ...
#define PCI_ERR_ROOT_STATUS ...
#define PCI_ERR_ROOT_COR_SRC ...
#define PCI_ERR_ROOT_SRC ...

/* Virtual Channel */
#define PCI_VC_PORT_REG1 ...
#define PCI_VC_PORT_REG2 ...
#define PCI_VC_PORT_CTRL ...
#define PCI_VC_PORT_STATUS ...
#define PCI_VC_RES_CAP ...
#define PCI_VC_RES_CTRL ...
#define PCI_VC_RES_STATUS ...

/* Power Budgeting */
#define PCI_PWR_DSR ...
#define PCI_PWR_DATA ...
#define PCI_PWR_CAP ...

/* Root Complex Link */
#define PCI_RCLINK_ESD ...
#define PCI_RCLINK_LINK1 ...
#define PCI_RCLINK_LINK_DESC ...
#define PCI_RCLINK_LINK_ADDR ...
#define PCI_RCLINK_LINK_SIZE ...

/* PCIe Vendor-Specific Capability */
#define PCI_EVNDR_HEADER ...
#define PCI_EVNDR_REGISTERS ...

/* Access Control Services */
#define PCI_ACS_CAP ...
#define PCI_ACS_CAP_VALID ...
#define PCI_ACS_CAP_BLOCK ...
#define PCI_ACS_CAP_REQ_RED ...
#define PCI_ACS_CAP_CMPLT_RED ...
#define PCI_ACS_CAP_FORWARD ...
#define PCI_ACS_CAP_EGRESS ...
#define PCI_ACS_CAP_TRANS ...
#define PCI_ACS_CTRL ...
#define PCI_ACS_CTRL_VALID ...
#define PCI_ACS_CTRL_BLOCK ...
#define PCI_ACS_CTRL_REQ_RED ...
#define PCI_ACS_CTRL_CMPLT_RED ...
#define PCI_ACS_CTRL_FORWARD ...
#define PCI_ACS_CTRL_EGRESS ...
#define PCI_ACS_CTRL_TRANS ...
#define PCI_ACS_EGRESS_CTRL ...

/* Alternative Routing-ID Interpretation */
#define PCI_ARI_CAP ...
#define PCI_ARI_CAP_MFVC ...
#define PCI_ARI_CAP_ACS ...
#define PCI_ARI_CTRL ...
#define PCI_ARI_CTRL_MFVC ...
#define PCI_ARI_CTRL_ACS ...

/* Address Translation Service */
#define PCI_ATS_CAP ...
#define PCI_ATS_CTRL ...
#define PCI_ATS_CTRL_ENABLE ...

/* Single Root I/O Virtualization */
#define PCI_IOV_CAP ...
#define PCI_IOV_CAP_VFM ...
#define PCI_IOV_CTRL ...
#define PCI_IOV_CTRL_VFE ...
#define PCI_IOV_CTRL_VFME ...
#define PCI_IOV_CTRL_VFMIE ...
#define PCI_IOV_CTRL_MSE ...
#define PCI_IOV_CTRL_ARI ...
#define PCI_IOV_STATUS ...
#define PCI_IOV_STATUS_MS ...
#define PCI_IOV_INITIALVF ...
#define PCI_IOV_TOTALVF ...
#define PCI_IOV_NUMVF ...
#define PCI_IOV_FDL ...
#define PCI_IOV_OFFSET ...
#define PCI_IOV_STRIDE ...
#define PCI_IOV_DID ...
#define PCI_IOV_SUPPS ...
#define PCI_IOV_SYSPS ...
#define PCI_IOV_BAR_BASE ...
#define PCI_IOV_NUM_BAR ...
#define PCI_IOV_MSAO ...

/* Page Request Interface */
#define PCI_PRI_CTRL ...
#define PCI_PRI_CTRL_ENABLE ...
#define PCI_PRI_CTRL_RESET ...
#define PCI_PRI_STATUS ...
#define PCI_PRI_STATUS_RF ...
#define PCI_PRI_STATUS_UPRGI ...
#define PCI_PRI_STATUS_STOPPED ...
#define PCI_PRI_MAX_REQ ...
#define PCI_PRI_ALLOC_REQ ...

/* Transaction Processing Hints */
#define PCI_TPH_CAPABILITIES ...
#define PCI_TPH_INTVEC_SUP ...
#define PCI_TPH_DEV_SUP ...
#define PCI_TPH_EXT_REQ_SUP ...
#define PCI_TPH_ST_LOC_MASK ...
#define PCI_TPH_ST_NONE ...
#define PCI_TPH_ST_CAP ...
#define PCI_TPH_ST_MSIX ...
#define PCI_TPH_ST_SIZE_SHIFT ...

/* Latency Tolerance Reporting */
#define PCI_LTR_MAX_SNOOP ...
#define PCI_LTR_VALUE_MASK ...
#define PCI_LTR_SCALE_SHIFT ...
#define PCI_LTR_SCALE_MASK ...
#define PCI_LTR_MAX_NOSNOOP ...

/* Process Address Space ID */
#define PCI_PASID_CAP ...
#define PCI_PASID_CAP_EXEC ...
#define PCI_PASID_CAP_PRIV ...
#define PCI_PASID_CTRL ...
#define PCI_PASID_CTRL_ENABLE ...
#define PCI_PASID_CTRL_EXEC ...
#define PCI_PASID_CTRL_PRIV ...

#define PCI_DPC_CAP ...
#define PCI_DPC_CAP_RP_EXT ...
#define PCI_DPC_CAP_TLP_BLOCK ...
#define PCI_DPC_CAP_SW_TRIGGER ...
#define PCI_DPC_CAP_DL_ACT_ERR ...
#define PCI_DPC_CTL ...
#define PCI_DPC_CTL_CMPL ...
#define PCI_DPC_CTL_INT ...
#define PCI_DPC_CTL_ERR_COR ...
#define PCI_DPC_CTL_TLP ...
#define PCI_DPC_CTL_SW_TRIGGER ...
#define PCI_DPC_CTL_DL_ACTIVE ...
#define PCI_DPC_STATUS ...
#define PCI_DPC_STS_TRIGGER ...
#define PCI_DPC_STS_INT ...
#define PCI_DPC_STS_RP_BUSY ...
#define PCI_DPC_SOURCE ...

/* L1 PM Substates Extended Capability */
#define PCI_L1PM_SUBSTAT_CAP ...
#define PCI_L1PM_SUBSTAT_CAP_PM_L12 ...
#define PCI_L1PM_SUBSTAT_CAP_PM_L11 ...
#define PCI_L1PM_SUBSTAT_CAP_ASPM_L12 ...
#define PCI_L1PM_SUBSTAT_CAP_ASPM_L11 ...
#define PCI_L1PM_SUBSTAT_CAP_L1PM_SUPP ...
#define PCI_L1PM_SUBSTAT_CTL1 ...
#define PCI_L1PM_SUBSTAT_CTL1_PM_L12 ...
#define PCI_L1PM_SUBSTAT_CTL1_PM_L11 ...
#define PCI_L1PM_SUBSTAT_CTL1_ASPM_L12 ...
#define PCI_L1PM_SUBSTAT_CTL1_ASPM_L11 ...
#define PCI_L1PM_SUBSTAT_CTL2 ...

/*
 * The PCI interface treats multi-function devices as independent
 * devices.  The slot/function address of each device is encoded
 * in a single byte as follows:
 *
 *	7:3 = slot
 *	2:0 = function
 */

/* Device classes and subclasses */

#define PCI_CLASS_NOT_DEFINED ...
#define PCI_CLASS_NOT_DEFINED_VGA ...

#define PCI_BASE_CLASS_STORAGE ...
#define PCI_CLASS_STORAGE_SCSI ...
#define PCI_CLASS_STORAGE_IDE ...
#define PCI_CLASS_STORAGE_FLOPPY ...
#define PCI_CLASS_STORAGE_IPI ...
#define PCI_CLASS_STORAGE_RAID ...
#define PCI_CLASS_STORAGE_ATA ...
#define PCI_CLASS_STORAGE_SATA ...
#define PCI_CLASS_STORAGE_SAS ...
#define PCI_CLASS_STORAGE_OTHER ...

#define PCI_BASE_CLASS_NETWORK ...
#define PCI_CLASS_NETWORK_ETHERNET ...
#define PCI_CLASS_NETWORK_TOKEN_RING ...
#define PCI_CLASS_NETWORK_FDDI ...
#define PCI_CLASS_NETWORK_ATM ...
#define PCI_CLASS_NETWORK_ISDN ...
#define PCI_CLASS_NETWORK_OTHER ...

#define PCI_BASE_CLASS_DISPLAY ...
#define PCI_CLASS_DISPLAY_VGA ...
#define PCI_CLASS_DISPLAY_XGA ...
#define PCI_CLASS_DISPLAY_3D ...
#define PCI_CLASS_DISPLAY_OTHER ...

#define PCI_BASE_CLASS_MULTIMEDIA ...
#define PCI_CLASS_MULTIMEDIA_VIDEO ...
#define PCI_CLASS_MULTIMEDIA_AUDIO ...
#define PCI_CLASS_MULTIMEDIA_PHONE ...
#define PCI_CLASS_MULTIMEDIA_AUDIO_DEV ...
#define PCI_CLASS_MULTIMEDIA_OTHER ...

#define PCI_BASE_CLASS_MEMORY ...
#define PCI_CLASS_MEMORY_RAM ...
#define PCI_CLASS_MEMORY_FLASH ...
#define PCI_CLASS_MEMORY_OTHER ...

#define PCI_BASE_CLASS_BRIDGE ...
#define PCI_CLASS_BRIDGE_HOST ...
#define PCI_CLASS_BRIDGE_ISA ...
#define PCI_CLASS_BRIDGE_EISA ...
#define PCI_CLASS_BRIDGE_MC ...
#define PCI_CLASS_BRIDGE_PCI ...
#define PCI_CLASS_BRIDGE_PCMCIA ...
#define PCI_CLASS_BRIDGE_NUBUS ...
#define PCI_CLASS_BRIDGE_CARDBUS ...
#define PCI_CLASS_BRIDGE_RACEWAY ...
#define PCI_CLASS_BRIDGE_PCI_SEMI ...
#define PCI_CLASS_BRIDGE_IB_TO_PCI ...
#define PCI_CLASS_BRIDGE_OTHER ...

#define PCI_BASE_CLASS_COMMUNICATION ...
#define PCI_CLASS_COMMUNICATION_SERIAL ...
#define PCI_CLASS_COMMUNICATION_PARALLEL ...
#define PCI_CLASS_COMMUNICATION_MSERIAL ...
#define PCI_CLASS_COMMUNICATION_MODEM ...
#define PCI_CLASS_COMMUNICATION_OTHER ...

#define PCI_BASE_CLASS_SYSTEM ...
#define PCI_CLASS_SYSTEM_PIC ...
#define PCI_CLASS_SYSTEM_DMA ...
#define PCI_CLASS_SYSTEM_TIMER ...
#define PCI_CLASS_SYSTEM_RTC ...
#define PCI_CLASS_SYSTEM_PCI_HOTPLUG ...
#define PCI_CLASS_SYSTEM_OTHER ...

#define PCI_BASE_CLASS_INPUT ...
#define PCI_CLASS_INPUT_KEYBOARD ...
#define PCI_CLASS_INPUT_PEN ...
#define PCI_CLASS_INPUT_MOUSE ...
#define PCI_CLASS_INPUT_SCANNER ...
#define PCI_CLASS_INPUT_GAMEPORT ...
#define PCI_CLASS_INPUT_OTHER ...

#define PCI_BASE_CLASS_DOCKING ...
#define PCI_CLASS_DOCKING_GENERIC ...
#define PCI_CLASS_DOCKING_OTHER ...

#define PCI_BASE_CLASS_PROCESSOR ...
#define PCI_CLASS_PROCESSOR_386 ...
#define PCI_CLASS_PROCESSOR_486 ...
#define PCI_CLASS_PROCESSOR_PENTIUM ...
#define PCI_CLASS_PROCESSOR_ALPHA ...
#define PCI_CLASS_PROCESSOR_POWERPC ...
#define PCI_CLASS_PROCESSOR_MIPS ...
#define PCI_CLASS_PROCESSOR_CO ...

#define PCI_BASE_CLASS_SERIAL ...
#define PCI_CLASS_SERIAL_FIREWIRE ...
#define PCI_CLASS_SERIAL_ACCESS ...
#define PCI_CLASS_SERIAL_SSA ...
#define PCI_CLASS_SERIAL_USB ...
#define PCI_CLASS_SERIAL_FIBER ...
#define PCI_CLASS_SERIAL_SMBUS ...
#define PCI_CLASS_SERIAL_INFINIBAND ...

#define PCI_BASE_CLASS_WIRELESS ...
#define PCI_CLASS_WIRELESS_IRDA ...
#define PCI_CLASS_WIRELESS_CONSUMER_IR ...
#define PCI_CLASS_WIRELESS_RF ...
#define PCI_CLASS_WIRELESS_OTHER ...

#define PCI_BASE_CLASS_INTELLIGENT ...
#define PCI_CLASS_INTELLIGENT_I2O ...

#define PCI_BASE_CLASS_SATELLITE ...
#define PCI_CLASS_SATELLITE_TV ...
#define PCI_CLASS_SATELLITE_AUDIO ...
#define PCI_CLASS_SATELLITE_VOICE ...
#define PCI_CLASS_SATELLITE_DATA ...

#define PCI_BASE_CLASS_CRYPT ...
#define PCI_CLASS_CRYPT_NETWORK ...
#define PCI_CLASS_CRYPT_ENTERTAINMENT ...
#define PCI_CLASS_CRYPT_OTHER ...

#define PCI_BASE_CLASS_SIGNAL ...
#define PCI_CLASS_SIGNAL_DPIO ...
#define PCI_CLASS_SIGNAL_PERF_CTR ...
#define PCI_CLASS_SIGNAL_SYNCHRONIZER ...
#define PCI_CLASS_SIGNAL_OTHER ...

#define PCI_CLASS_OTHERS ...

/* Several ID's we need in the library */

#define PCI_VENDOR_ID_INTEL ...
#define PCI_VENDOR_ID_COMPAQ ...

/* I/O resource flags, compatible with <include/linux/ioport.h> */

#define PCI_IORESOURCE_PCI_EA_BEI ...


/* types.h */

typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;
typedef u64 pciaddr_t;


/* pci.h */

#define PCI_LIB_VERSION ...

struct pci_methods;

enum pci_access_type {
  /* Known access methods, remember to update access.c as well */
  PCI_ACCESS_AUTO,			/* Autodetection */
  PCI_ACCESS_SYS_BUS_PCI,		/* Linux /sys/bus/pci */
  PCI_ACCESS_PROC_BUS_PCI,		/* Linux /proc/bus/pci */
  PCI_ACCESS_I386_TYPE1,		/* i386 ports, type 1 */
  PCI_ACCESS_I386_TYPE2,		/* i386 ports, type 2 */
  PCI_ACCESS_FBSD_DEVICE,		/* FreeBSD /dev/pci */
  PCI_ACCESS_AIX_DEVICE,		/* /dev/pci0, /dev/bus0, etc. */
  PCI_ACCESS_NBSD_LIBPCI,		/* NetBSD libpci */
  PCI_ACCESS_OBSD_DEVICE,		/* OpenBSD /dev/pci */
  PCI_ACCESS_DUMP,			/* Dump file */
  PCI_ACCESS_DARWIN,			/* Darwin */
  PCI_ACCESS_MAX
};

struct pci_access {
  /* Options you can change: */
  unsigned int method;			/* Access method */
  int writeable;			/* Open in read/write mode */
  int buscentric;			/* Bus-centric view of the world */

  char *id_file_name;			/* Name of ID list file (use pci_set_name_list_path()) */
  int free_id_name;			/* Set if id_file_name is malloced */
  int numeric_ids;			/* Enforce PCI_LOOKUP_NUMERIC (>1 => PCI_LOOKUP_MIXED) */

  unsigned int id_lookup_mode;		/* pci_lookup_mode flags which are set automatically */
					/* Default: PCI_LOOKUP_CACHE */

  int debugging;			/* Turn on debugging messages */

  /* Functions you can override: */
  void (*error)(char *msg, ...);	/* Write error message and quit */
  void (*warning)(char *msg, ...);	/* Write a warning message */
  void (*debug)(char *msg, ...);	/* Write a debugging message */

  struct pci_dev *devices;		/* Devices found on this bus */

  /* Fields used internally: */
  struct pci_methods *methods;
  struct pci_param *params;
  struct id_entry **id_hash;		/* names.c */
  struct id_bucket *current_id_bucket;
  int id_load_failed;
  int id_cache_status;			/* 0=not read, 1=read, 2=dirty */
  struct udev *id_udev;			/* names-hwdb.c */
  struct udev_hwdb *id_udev_hwdb;
  int fd;				/* proc/sys: fd for config space */
  int fd_rw;				/* proc/sys: fd opened read-write */
  int fd_pos;				/* proc/sys: current position */
  int fd_vpd;				/* sys: fd for VPD */
  struct pci_dev *cached_dev;		/* proc/sys: device the fds are for */
};

/* Initialize PCI access */
struct pci_access *pci_alloc(void);
void pci_init(struct pci_access *);
void pci_cleanup(struct pci_access *);

/* Scanning of devices */
void pci_scan_bus(struct pci_access *acc);
struct pci_dev *pci_get_dev(struct pci_access *acc, int domain, int bus, int dev, int func); /* Raw access to specified device */
void pci_free_dev(struct pci_dev *);

/* Names of access methods */
int pci_lookup_method(char *name);	/* Returns -1 if not found */
char *pci_get_method_name(int index);	/* Returns "" if unavailable, NULL if index out of range */

/*
 *	Named parameters
 */

struct pci_param {
  struct pci_param *next;		/* Please use pci_walk_params() for traversing the list */
  char *param;				/* Name of the parameter */
  char *value;				/* Value of the parameter */
  int value_malloced;			/* used internally */
  char *help;				/* Explanation of the parameter */
};

char *pci_get_param(struct pci_access *acc, char *param);
int pci_set_param(struct pci_access *acc, char *param, char *value);	/* 0 on success, -1 if no such parameter */
/* To traverse the list, call pci_walk_params repeatedly, first with prev=NULL, and do not modify the parameters during traversal. */
struct pci_param *pci_walk_params(struct pci_access *acc, struct pci_param *prev);

/*
 *	Devices
 */

struct pci_dev {
  struct pci_dev *next;			/* Next device in the chain */
  u16 domain_16;			/* 16-bit version of the PCI domain for backward compatibility */
					/* 0xffff if the real domain doesn't fit in 16 bits */
  u8 bus, dev, func;			/* Bus inside domain, device and function */

  /* These fields are set by pci_fill_info() */
  int known_fields;			/* Set of info fields already known */
  u16 vendor_id, device_id;		/* Identity of the device */
  u16 device_class;			/* PCI device class */
  int irq;				/* IRQ number */
  pciaddr_t base_addr[6];		/* Base addresses including flags in lower bits */
  pciaddr_t size[6];			/* Region sizes */
  pciaddr_t rom_base_addr;		/* Expansion ROM base address */
  pciaddr_t rom_size;			/* Expansion ROM size */
  struct pci_cap *first_cap;		/* List of capabilities */
  char *phy_slot;			/* Physical slot */
  char *module_alias;			/* Linux kernel module alias */
  char *label;				/* Device name as exported by BIOS */
  int numa_node;			/* NUMA node */
  pciaddr_t flags[6];			/* PCI_IORESOURCE_* flags for regions */
  pciaddr_t rom_flags;			/* PCI_IORESOURCE_* flags for expansion ROM */
  int domain;				/* PCI domain (host bridge) */

  /* Fields used internally: */
  struct pci_access *access;
  struct pci_methods *methods;
  u8 *cache;				/* Cached config registers */
  int cache_len;
  int hdrtype;				/* Cached low 7 bits of header type, -1 if unknown */
  void *aux;				/* Auxillary data */
};

#define PCI_ADDR_IO_MASK ...
#define PCI_ADDR_MEM_MASK ...
#define PCI_ADDR_FLAG_MASK ...

u8 pci_read_byte(struct pci_dev *, int pos); /* Access to configuration space */
u16 pci_read_word(struct pci_dev *, int pos);
u32 pci_read_long(struct pci_dev *, int pos);
int pci_read_block(struct pci_dev *, int pos, u8 *buf, int len);
int pci_read_vpd(struct pci_dev *d, int pos, u8 *buf, int len);
int pci_write_byte(struct pci_dev *, int pos, u8 data);
int pci_write_word(struct pci_dev *, int pos, u16 data);
int pci_write_long(struct pci_dev *, int pos, u32 data);
int pci_write_block(struct pci_dev *, int pos, u8 *buf, int len);

int pci_fill_info(struct pci_dev *, int flags); /* Fill in device information */

#define PCI_FILL_IDENT ...
#define PCI_FILL_IRQ ...
#define PCI_FILL_BASES ...
#define PCI_FILL_ROM_BASE ...
#define PCI_FILL_SIZES ...
#define PCI_FILL_CLASS ...
#define PCI_FILL_CAPS ...
#define PCI_FILL_EXT_CAPS ...
#define PCI_FILL_PHYS_SLOT ...
#define PCI_FILL_MODULE_ALIAS ...
#define PCI_FILL_LABEL ...
#define PCI_FILL_NUMA_NODE ...
#define PCI_FILL_IO_FLAGS ...
#define PCI_FILL_RESCAN ...

void pci_setup_cache(struct pci_dev *, u8 *cache, int len);

/*
 *	Capabilities
 */

struct pci_cap {
  struct pci_cap *next;
  u16 id;				/* PCI_CAP_ID_xxx */
  u16 type;				/* PCI_CAP_xxx */
  unsigned int addr;			/* Position in the config space */
};

#define PCI_CAP_NORMAL ...
#define PCI_CAP_EXTENDED ...

struct pci_cap *pci_find_cap(struct pci_dev *, unsigned int id, unsigned int type);

/*
 *	Filters
 */

struct pci_filter {
  int domain, bus, slot, func;			/* -1 = ANY */
  int vendor, device, device_class;
  int rfu[3];
};

void pci_filter_init(struct pci_access *, struct pci_filter *);
char *pci_filter_parse_slot(struct pci_filter *, char *);
char *pci_filter_parse_id(struct pci_filter *, char *);
int pci_filter_match(struct pci_filter *, struct pci_dev *);

/*
 *	Conversion of PCI ID's to names (according to the pci.ids file)
 *
 *	Call pci_lookup_name() to identify different types of ID's:
 *
 *	VENDOR				(vendorID) -> vendor
 *	DEVICE				(vendorID, deviceID) -> device
 *	VENDOR | DEVICE			(vendorID, deviceID) -> combined vendor and device
 *	SUBSYSTEM | VENDOR		(subvendorID) -> subsystem vendor
 *	SUBSYSTEM | DEVICE		(vendorID, deviceID, subvendorID, subdevID) -> subsystem device
 *	SUBSYSTEM | VENDOR | DEVICE	(vendorID, deviceID, subvendorID, subdevID) -> combined subsystem v+d
 *	SUBSYSTEM | ...			(-1, -1, subvendorID, subdevID) -> generic subsystem
 *	CLASS				(classID) -> class
 *	PROGIF				(classID, progif) -> programming interface
 */

char *pci_lookup_name(struct pci_access *a, char *buf, int size, int flags, ...);

int pci_load_name_list(struct pci_access *a);	/* Called automatically by pci_lookup_*() when needed; returns success */
void pci_free_name_list(struct pci_access *a);	/* Called automatically by pci_cleanup() */
void pci_set_name_list_path(struct pci_access *a, char *name, int to_be_freed);
void pci_id_cache_flush(struct pci_access *a);

enum pci_lookup_mode {
  PCI_LOOKUP_VENDOR = 1,		/* Vendor name (args: vendorID) */
  PCI_LOOKUP_DEVICE = 2,		/* Device name (args: vendorID, deviceID) */
  PCI_LOOKUP_CLASS = 4,			/* Device class (args: classID) */
  PCI_LOOKUP_SUBSYSTEM = 8,
  PCI_LOOKUP_PROGIF = 16,		/* Programming interface (args: classID, prog_if) */
  PCI_LOOKUP_NUMERIC = 0x10000,		/* Want only formatted numbers; default if access->numeric_ids is set */
  PCI_LOOKUP_NO_NUMBERS = 0x20000,	/* Return NULL if not found in the database; default is to print numerically */
  PCI_LOOKUP_MIXED = 0x40000,		/* Include both numbers and names */
  PCI_LOOKUP_NETWORK = 0x80000,		/* Try to resolve unknown ID's by DNS */
  PCI_LOOKUP_SKIP_LOCAL = 0x100000,	/* Do not consult local database */
  PCI_LOOKUP_CACHE = 0x200000,		/* Consult the local cache before using DNS */
  PCI_LOOKUP_REFRESH_CACHE = 0x400000,	/* Forget all previously cached entries, but still allow updating the cache */
  PCI_LOOKUP_NO_HWDB = 0x800000,	/* Do not ask udev's hwdb */
};
""")

builder.set_source("chipset.pci._libpci",
                   "\n#include <pci/pci.h>\n",
                   libraries=["pci"])

def main():
    builder.compile(verbose=True)

if __name__ == "__main__":
    main()
